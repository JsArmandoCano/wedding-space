---

---

<div class="content__counter">
    <div class="count">
        <div class="numbers">
            <div>0</div>
            <div>0</div>
        </div>
        <div class="text">
            <p>DAYS</p>
        </div>
    </div>
    <div class="divisors">
        <div></div>
        <div></div>
    </div>
    <div class="count">
        <div class="numbers">
            <div>0</div>
            <div>0</div>
        </div>
        <div class="text">
            <p>HRS</p>
        </div>
    </div>
    <div class="divisors">
        <div></div>
        <div></div>
    </div>
    <div class="count">
        <div class="numbers">
            <div>0</div>
            <div>0</div>
        </div>
        <div class="text">
            <p>MINS</p>
        </div>
    </div>
    <div class="divisors">
        <div></div>
        <div></div>
    </div>
    <div class="count">
        <div class="numbers" data-unit="seconds">
            <div>0</div>
            <div>0</div>
        </div>
        <div class="text">
            <p>SECS</p>
        </div>
    </div>
</div>


<style>
    .content__counter {
        width: 100%;
        margin-top: 20px;
        display: flex;
        justify-content: center;
    }

    .content__counter .count {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 5px;
    }

    .content__counter .count .numbers {
        display: flex;
        border: 2px solid #fff;
        background-color: #272727;
    }

    .content__counter .count .numbers div {
        width: 28px;
        height: 38px;
        color: #fff;
        display: flex;
        justify-content: center;
        align-items: center;
        font-size: 20px;
    }

    .content__counter .count .numbers div:nth-child(1) {
        border-right: 1.5px solid #000;
    }

    .content__counter .count .text {
        font-size: 14px;
        color: #272727;
        font-weight: 500;
    }

    .content__counter .count .text p {
        margin: 0;
    }

    .content__counter .divisors {
        height: 44px;
        margin: 0 10px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        gap: 8px;
    }

    .content__counter .divisors div {
        width: 5px;
        height: 5px;
        background-color: #292929;
    }
</style>

<script>
    // @ts-nocheck
    (function () {
    // Target date: 09/01/2026 at 10:30 local time (dd/mm/yyyy -> 9 Jan 2026 10:30)
        const target = new Date(2026, 0, 9, 10, 30, 0); // month is 0-indexed (0 = January)

        /** @type {NodeListOf<HTMLElement>} */
        const numbers = document.querySelectorAll('.content__counter .count .numbers');

        /**
         * Pad a number with leading zeros and keep the requested length.
         * @param {number} value
         * @param {number} length
         */
        function padDigits(value, length) {
            return String(value).padStart(length, '0').slice(-length);
        }

        /**
         * Update time calculation and DOM
         */
        function update() {
            const now = new Date();
            // use timestamps for arithmetic to satisfy checkers
            let diff = target.getTime() - now.getTime();

            if (diff <= 0) {
                // time's up -> set all to zero and stop
                setDigits(0, 0, 0, 0);
                clearInterval(intervalId);
                return;
            }

            const days = Math.floor(diff / (24 * 60 * 60 * 1000));
            diff -= days * 24 * 60 * 60 * 1000;
            const hours = Math.floor(diff / (60 * 60 * 1000));
            diff -= hours * 60 * 60 * 1000;
            const minutes = Math.floor(diff / (60 * 1000));
            diff -= minutes * 60 * 1000;
            const seconds = Math.floor(diff / 1000);

            setDigits(days, hours, minutes, seconds);
        }

        /**
         * Update the DOM digits dynamically based on how many child divs each
         * `.numbers` block has. This lets you remove or add digit <div>s
         * in the markup without breaking the counter.
         * @param {number} days
         * @param {number} hours
         * @param {number} minutes
         * @param {number} seconds
         */
        function setDigits(days, hours, minutes, seconds) {
            const unitValues = [days, hours, minutes, seconds];

            for (let idx = 0; idx < numbers.length; idx++) {
                const numEl = /** @type {HTMLElement} */ (numbers[idx]);
                const children = Array.from(numEl.children);
                const len = children.length || 1; // fallback to 1 to avoid zero-length

                // value for this block (if there's no corresponding unit, use 0)
                const rawValue = typeof unitValues[idx] === 'number' ? unitValues[idx] : 0;

                // cap the value so it fits in the available digits
                const cap = Math.pow(10, len) - 1;
                const value = Math.max(0, Math.min(rawValue, cap));

                const valueStr = padDigits(value, len);

                // populate each child with the corresponding char
                for (let i = 0; i < children.length; i++) {
                    const ch = children[i];
                    ch.textContent = valueStr.charAt(i);
                }
            }
        }

        // Run immediately and then every second
        update();
        /** @type {number} */
        const intervalId = window.setInterval(update, 1000);
    })();
</script>